//Don't know if this will get used or not so its an entirely seperate file.

GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
    
    if (isNormalMode) {
        //small fission reactor (IV-LuV ~1 UV amp and only takes TBU fuel)
        event.create('fission_reactor')
            .category('multiblock')
            .setEUIO('out')
            .setMaxIOSize(1, 1, 1, 1)
            .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
            .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
            .setSound(GTSoundEntries.COOLING)

        //large fission reactor (LuV-early UV up to ~1 UEV amp dependant on fuel and doesn't take TBU fuel)
        //this would be egregiously hard to produce with steam turbines so maybe not steam? 
        event.create('large_fission_reactor')
            .category('multiblock')
            .setEUIO('out')
            .setMaxIOSize(1, 1, 1, 1)
            .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
            .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
            .setSound(GTSoundEntries.COOLING)
    }

    if (!isNormalMode) {
        //fast breeder reactor (supposed to help HM/EM players with sunnarium stuff, takes a minimal amount of power)
        event.create('fast_breeder_reactor')
            .category('multiblock')
            .setEUIO('in')
            .setMaxIOSize(1, 1, 1, 1)
            .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
            .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
            .setSound(GTSoundEntries.ARC)
    }
})

GTCEuStartupEvents.registry('gtceu:machine', event => {

    event.create('fission_reactor', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('fission_reactor')
        .appearanceBlock(() => Block.getBlock('kubejs:fission_reactor_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("HHHHHHH", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA",)
            .aisle("HAAAAAH", "AFCFCFA", "ACFCFCA", "AFCFCFA", "ACFCFCA", "AFCFCFA", "AAAAAAA",)
            .aisle("HAAAAAH", "ACFCFCA", "AFCFCFA", "ACFCFCA", "AFCFCFA", "ACFCFCA", "AAAAAAA",)
            .aisle("HAAAAAH", "AFCFCFA", "ACFCFCA", "AFCFCFA", "ACFCFCA", "AFCFCFA", "AAAAAAA",)
            .aisle("HAAAAAH", "ACFCFCA", "AFCFCFA", "ACFCFCA", "AFCFCFA", "ACFCFCA", "AAAAAAA",)
            .aisle("HAAAAAH", "AFCFCFA", "ACFCFCA", "AFCFCFA", "ACFCFCA", "AFCFCFA", "AAAAAAA",)
            .aisle("HHH@HHH", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA", "AAAAAAA",)
            .where('@', Predicates.controller(Predicates.blocks(definition.get())))
            .where('A', Predicates.blocks('kubejs:fission_reactor_casing').setMinGlobalLimited(210))
            .where('F', Predicates.blocks('kubejs:fission_fuel_cell'))
            .where('C', Predicates.blocks('kubejs:fission_coolant_cell'))
            .where('H', Predicates.blocks('kubejs:fission_reactor_casing')
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
            .build())
            //First time doing KJS stuff so I don't know if this is right
        .workableCasingRenderer("kubejs:block/NCreplacement/fission_reactor_casing",
            "gtceu:block/machines/electrolyzer", false)
        
    event.create('large_fission_reactor', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeTypes('large_fission_reactor')
        .appearanceBlock(() => Block.getBlock('kubejs:fission_reactor_casing'))
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("##HHHHHHH##", "##AAAAAAA##", "##AAAAAAA##", "##AAAAAAA##", "##AAAAAAA##", "##AAAAAAA##", "##AAAAAAA##")
            .aisle("#HAAAAAAAH#", "#ALLLLLLLA#", "#ALLLLLLLA#", "#ALLLLLLLA#", "#ALLLLLLLA#", "#ALLLLLLLA#", "#AAAAAAAAA#")
            .aisle("HAAAAAAAAAH", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "AAAAAAAAAAA")
            .aisle("HAAAAAAAAAH", "ALFMFLFMFLA", "ALFMFLFMFLA", "ALFMFLFMFLA", "ALFMFLFMFLA", "ALFMFLFMFLA", "AAAAAAAAAAA")
            .aisle("HAAAAAAAAAH", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "AAAAAAAAAAA")
            .aisle("HAAAAAAAAAH", "ALLLLLLLLLA", "ALLLLLLLLLA", "ALLLLLLLLLA", "ALLLLLLLLLA", "ALLLLLLLLLA", "AAAAAAAAAAA")
            .aisle("HAAAAAAAAAH", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "AAAAAAAAAAA")
            .aisle("HAAAAAAAAAH", "ALFMFLFMFLA", "ALFMFLFMFLA", "ALFMFLFMFLA", "ALFMFLFMFLA", "ALFMFLFMFLA", "AAAAAAAAAAA")
            .aisle("HAAAAAAAAAH", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "ALCFCLCFCLA", "AAAAAAAAAAA")
            .aisle("#HAAAAAAAH#", "#ALLLLLLLA#", "#ALLLLLLLA#", "#ALLLLLLLA#", "#ALLLLLLLA#", "#ALLLLLLLA#", "#AAAAAAAAA#")
            .aisle("##HHH@HHH##", "##AAAAAAA##", "##AAAAAAA##", "##AAAAAAA##", "##AAAAAAA##", "##AAAAAAA##", "##AAAAAAA##")
            .where('@', Predicates.controller(Predicates.blocks(definition.get())))
            .where('A', Predicates.blocks('kubejs:fission_reactor_casing').setMinGlobalLimited(368))
            .where('F', Predicates.blocks('kubejs:fission_fuel_cell'))
            .where('C', Predicates.blocks('kubejs:fission_coolant_cell'))
            .where('L', Predicates.blocks('gtceu:lead_block'))
            .where('M', Predicates.blocks('gtceu:graphite_block'))
            .where('#', Predicates.any())
            .where('H', Predicates.blocks('kubejs:fission_reactor_casing'))
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            .build())
        .workableCasingRenderer("kubejs:block/NCreplacement/fission_reactor_casing",
            "gtceu:block/machines/electrolyzer", false)

    if (!isNormalMode) {
        event.create('fast_breeder_reactor', 'multiblock')
            .rotationState(RotationState.NON_Y_AXIS)
            .recipeTypes('fast_breeder_reactor')
            .appearanceBlock(() => Block.getBlock('gtceu:stress_proof_casing'))
            .pattern(definition => FactoryBlockPattern.start()
                .aisle("####HHHHH####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####")
                .aisle("##HHAAAAAHH##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AAAAAAAAA##")
                .aisle("#HAAAAAAAAAH#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#AAAAAAAAAAA#")
                .aisle("#HAAAAAAAAAH#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#AAAAAAAAAAA#")
                .aisle("HAAAAAAAAAAAH", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "AAAAAAAAAAAAA")
                .aisle("HAAAAAAAAAAAH", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "AAAAAAAAAAAAA")
                .aisle("HAAAAAAAAAAAH", "ARFMF S FMFRA", "ARFMF S FMFRA", "ARFMF S FMFRA", "ARFMF N FMFRA", "ARFMF S FMFRA", "ARFMF S FMFRA", "ARFMF S FMFRA", "AAAAAAAAAAAAA")
                .aisle("HAAAAAAAAAAAH", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "ARFMF   FMFRA", "AAAAAAAAAAAAA")
                .aisle("HAAAAAAAAAAAH", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "ARFMFFFFFMFRA", "AAAAAAAAAAAAA")
                .aisle("#HAAAAAAAAAH#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#ARFMMMMMFRA#", "#AAAAAAAAAAA#")
                .aisle("#HAAAAAAAAAH#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#ARRFFFFFRRA#", "#AAAAAAAAAAA#")
                .aisle("##HHAAAAAHH##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AARRRRRAA##", "##AAAAAAAAA##")
                .aisle("####HH@HH####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####", "####AAAAA####")
                .where('@', Predicates.controller(Predicates.blocks(definition.get())))
                .where('A', Predicates.blocks('gtceu:stress_proof_casing').setMinGlobalLimited(368))
                .where('F', Predicates.blocks('kubejs:fission_fuel_cell'))
                .where('C', Predicates.blocks('kubejs:fission_coolant_cell'))
                .where('R', Predicates.blocks('kubejs:neutron_reflector'))
                .where('S', Predicates.blocks('gtceu:naquadah_alloy_frame'))
                .where('L', Predicates.blocks('gtceu:lead_block'))
                .where('M', Predicates.blocks('gtceu:graphite_block'))
                .where('N', Predicates.blocks('kubejs:neutron_source'))
                .where('#', Predicates.any())
                .where('H', Predicates.blocks('gtceu:stress_proof_casing'))
                    .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                    .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .build())
            .workableCasingRenderer("gtceu:block/casings/gcym/stress_proof_casing",
                "gtceu:block/multiblock/fusion_reactor", false)  
        
        

    }
})

StartupEvents.registry("block", event => {

    event.create('fission_reactor_casing')
        .displayName('Fission Reactor Casing')
        .soundType('metal')
        .resistance(6)
        .hardness(5)
        .tagBlock("mineable/pickaxe")
        .tagBlock("forge:mineable/wrench")
        .requiresTool(true);

    event.create('fission_fuel_cell')
        .displayName('Fission Fuel Cell')
        .soundType('metal')
        .resistance(6)
        .hardness(5)
        .tagBlock("mineable/pickaxe")
        .tagBlock("forge:mineable/wrench")
        .requiresTool(true);

    event.create('fission_coolant_cell')
        .displayName('Fission Coolant Cell')
        .soundType('metal')
        .resistance(6)
        .hardness(5)
        .tagBlock("mineable/pickaxe")
        .tagBlock("forge:mineable/wrench")
        .requiresTool(true);
    
    event.create('neutron_reflector')
        .displayName('Neutron Reflector')
        .soundType('metal')
        .resistance(3)
        .hardness(5)
        .tagBlock("mineable/pickaxe")
        .tagBlock("forge:mineable/wrench")
        .requiresTool(true);
    
    event.create('neutron_source')
        .displayName('Neutron Source')
        .soundType('glass')
        .resistance(3)
        .hardness(5)
        .tagBlock("mineable/pickaxe")
        .tagBlock("forge:mineable/wrench")
        .defaultCutout()
        .requiresTool(true);
})

event.create('thorium_232').texture('kubejs:item/NCreplacement/thorium_232').displayName('Thorium 232')
event.create('uranium_233').texture('kubejs:item/NCreplacement/uranium_233').displayName('Uranium 233')
event.create('neptunium_236').texture('kubejs:item/NCreplacement/neptunium_236').displayName('Neptunium 236')
event.create('neptunium_237').texture('kubejs:item/NCreplacement/neptunium_237').displayName('Neptunium 237')
event.create('plutonium_242').texture('kubejs:item/NCreplacement/plutonium_242').displayName('Plutonium 242')
event.create('americium_241').texture('kubejs:item/NCreplacement/americium_241').displayName('Americium 241')
event.create('americium_242').texture('kubejs:item/NCreplacement/americium_242').displayName('Americium 242')
event.create('americium_243').texture('kubejs:item/NCreplacement/americium_243').displayName('Americium 243')
event.create('curium_243').texture('kubejs:item/NCreplacement/curium_243').displayName('Curium 243')
event.create('curium_245').texture('kubejs:item/NCreplacement/curium_245').displayName('Curium 245')
event.create('curium_246').texture('kubejs:item/NCreplacement/curium_246').displayName('Curium 246')
event.create('curium_247').texture('kubejs:item/NCreplacement/curium_247').displayName('Curium 247')
event.create('berkelium_247').texture('kubejs:item/NCreplacement/berkelium_247').displayName('berkelium_247')
event.create('berkelium_248').texture('kubejs:item/NCreplacement/berkelium_248').displayName('berkelium_248')
event.create('californium_249').texture('kubejs:item/NCreplacement/californium_249').displayName('Californium 249')
event.create('californium_250').texture('kubejs:item/NCreplacement/californium_250').displayName('Californium 250')
event.create('californium_251').texture('kubejs:item/NCreplacement/californium_251').displayName('Californium 251')
event.create('californium_252').texture('kubejs:item/NCreplacement/californium_252').displayName('Californium 252')

event.create('tbu_fuel').texture('kubejs:item/NCreplacement/tbu_fuel').displayName('TBU Fuel')
event.create('leu_233').texture('kubejs:item/NCreplacement/leu_233').displayName('LEU 233 Fission Fuel')
event.create('leu_235').texture('kubejs:item/NCreplacement/leu_235').displayName('LEU 235 Fission Fuel')
event.create('len_236').texture('kubejs:item/NCreplacement/len_236').displayName('LEN 236 Fission Fuel')
event.create('lep_239').texture('kubejs:item/NCreplacement/lep_239').displayName('LEP 239 Fission Fuel')
event.create('lep_241').texture('kubejs:item/NCreplacement/lep_241').displayName('LEP 241 Fission Fuel')
event.create('lea_242').texture('kubejs:item/NCreplacement/lea_242').displayName('LEA 242 Fission Fuel')
event.create('lecm_243').texture('kubejs:item/NCreplacement/lecm_243').displayName('LECM 243 Fission Fuel')
event.create('lecm_245').texture('kubejs:item/NCreplacement/lecm_245').displayName('LECM 245 Fission Fuel')
event.create('lecm_247').texture('kubejs:item/NCreplacement/lecm_247').displayName('LECM 247 Fission Fuel')
event.create('leb_248').texture('kubejs:item/NCreplacement/leb_248').displayName('LEB 248 Fission Fuel')
event.create('lecf_249').texture('kubejs:item/NCreplacement/lecf_249').displayName('LECF 249 Fission Fuel')
event.create('lecf_251').texture('kubejs:item/NCreplacement/lecf_251').displayName('LECF 251 Fission Fuel')

event.create('depleted_tbu_fuel').texture('kubejs:item/NCreplacement/depleted_tbu_fuel').displayName('Depleted TBU Fuel')
event.create('depleted_leu_233').texture('kubejs:item/NCreplacement/depleted_leu_233').displayName('Depleted LEU 233 Fission Fuel')
event.create('depleted_leu_235').texture('kubejs:item/NCreplacement/depleted_leu_235').displayName('Depleted LEU 235 Fission Fuel')
event.create('depleted_len_236').texture('kubejs:item/NCreplacement/depleted_len_236').displayName('Depleted LEN 236 Fission Fuel')
event.create('depleted_lep_239').texture('kubejs:item/NCreplacement/depleted_lep_239').displayName('Depleted LEP 239 Fission Fuel')
event.create('depleted_lep_241').texture('kubejs:item/NCreplacement/depleted_lep_241').displayName('Depleted LEP 241 Fission Fuel')
event.create('depleted_lea_242').texture('kubejs:item/NCreplacement/depleted_lea_242').displayName('Depleted LEA 242 Fission Fuel')
event.create('depleted_lecm_243').texture('kubejs:item/NCreplacement/depleted_lecm_243').displayName('Depleted LECM 243 Fission Fuel')
event.create('depleted_lecm_245').texture('kubejs:item/NCreplacement/depleted_lecm_245').displayName('Depleted LECM 245 Fission Fuel')
event.create('depleted_lecm_247').texture('kubejs:item/NCreplacement/depleted_lecm_247').displayName('Depleted LECM 247 Fission Fuel')
event.create('depleted_leb_248').texture('kubejs:item/NCreplacement/depleted_leb_248').displayName('Depleted LEB 248 Fission Fuel')
event.create('depleted_lecf_249').texture('kubejs:item/NCreplacement/depleted_lecf_249').displayName('Depleted LECF 249 Fission Fuel')
event.create('depleted_lecf_251').texture('kubejs:item/NCreplacement/depleted_lecf_251').displayName('Depleted LECF 251 Fission Fuel')

event.create('rhodochrosite_dust').texture('kubejs:item/NCreplacement/rhodochrosite_dust').displayName('Rhodochrosite Dust')

GTCEuStartupEvents.registry('gtceu:material', event => {
    event.create('high_pressure_steam')
        .fluid()
        .color(bbcbfc74)
        .components('1x water')

})
